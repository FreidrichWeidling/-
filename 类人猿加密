# -//类人猿加密

#include "stdio.h"
#include "stdlib.h"
#include "string.h"

#define maxsize 6666
#define true 1
#define false 0

char b[25];
char B[25];
char fa;
char br;
char q[maxsize];
char mi[maxsize];
char mi2[maxsize];
char miyao[maxsize];
int zls;
int jib = 0;
int ss;
int panduan;

typedef char status;
typedef struct btn
{
	char data;
	struct btn *lc, *rc;
}btn, *bt;

status jianshu1(bt T, int key, bt f, bt *p, int i)
{
	if (!T)
	{
		*p = f;
		return false;
	}
	else
	{
		return jianshu1(T->rc, key, T, p, i);
	}
}

status jianshu2(bt *T, int key, int i)
{
	bt p, s;
	if (!jianshu1(*T, key, NULL, &p, i))
	{
		s = (bt)malloc(sizeof(btn));
		s->data = key;
		s->lc = s->rc = NULL;
		if (!p)
		{
			*T = s;
		}
		else if (i>0 && (i + 1) % 2 == 0)
		{
			p->lc = s;
		}
		else
		{
			p->rc = s;
		}
		return true;
	}
	else
		return false;
}

void gz(char a[maxsize])
{
	char c[25] = { 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y' };
	int m = 0, j = strlen(a), i;
	for (int k = 0; k < strlen(a); k++)
	{
		b[k] = a[k];
	}
	for (int u = 0; u < 25; u++)
	{
		for (i = 0; i < strlen(a); i++)
		{
			if (c[u] != a[i])
			{
				m++;
			}
		}
		if (m == strlen(a))
		{
			b[j] = c[u];
			j++;
		}
		else
		{
		}
		m = 0;
	}
}

void GZ(char a[maxsize])
{
	char c[25] = { 'A','B','C', 'D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y' };
	int m = 0, j = strlen(a), i;
	for (int k = 0; k < strlen(a); k++)
	{
		B[k] = a[k];
	}
	for (int u = 0; u < 25; u++)
	{
		for (i = 0; i < strlen(a); i++)
		{
			if (c[u] != a[i])
			{
				m++;
			}
		}
		if (m == strlen(a))
		{
			B[j] = c[u];
			j++;
		}
		else
		{
		}
		m = 0;
	}
}

void father(bt *T, char t, int i)
{
	if ((*T)->lc->data == t || (*T)->rc->data == t)
	{
		fa = (*T)->data;
	}
	else
	{
		bt s = NULL, k = NULL;
		s = (*T)->rc;
		k = (*T)->lc;
		if (s->lc == NULL&&k->lc != NULL)
		{
			father(&k, q[i], i);
		}
		else if (k->lc == NULL&&s->lc != NULL)
		{
			father(&s, q[i], i);
		}
	}
}

void bro(bt *T, char t, int i)
{
	if ((*T)->lc->data == t || (*T)->rc->data == t)
	{
		if (t != (*T)->lc->data)
		{
			br = (*T)->lc->data;
		}
		else if (t != (*T)->rc->data)
		{
			br = (*T)->rc->data;
		}
	}
	else
	{
		bt s = NULL, k = NULL;
		s = (*T)->rc;
		k = (*T)->lc;
		if (s->lc == NULL&&k->lc != NULL)
		{
			bro(&k, q[i], i);
		}
		else if (k->lc == NULL&&s->lc != NULL)
		{
			bro(&s, q[i], i);
		}
	}
}

void jiami(bt *T, char key, int i)
{
	if (T)
	{
		if ((*T)->data == key && (*T)->rc != NULL)
		{
			mi[jib] = (*T)->lc->data;
			mi[jib + 1] = (*T)->rc->data;
			jib += 2;
		}
		else if ((*T)->data != key && (*T)->rc != NULL)
		{
			bt s = NULL, k = NULL;
			s = (*T)->rc;
			k = (*T)->lc;
			jiami(&k, q[i], i);
			jiami(&s, q[i], i);
		}
	}
}

void san(char can[maxsize], int i)
{
	if (i>0)
	{
		int o;
		jib = 0;
		char zj[maxsize];
		for (int k = 0; k < strlen(can); k++)
		{
			zj[k] = can[k];
		}
		for (ss = 0; ss < strlen(mi); ss++)
		{
			if ((ss + 1) % 3 == 0)
			{
				mi2[jib] = zj[ss];
				jib++;
			}
		}
		for (ss = 0; ss < strlen(mi); ss++)
		{
			if ((ss + 1) % 3 != 0)
			{
				mi2[jib] = zj[ss];
				jib++;
			}
		}
		o = i - 1;
		if (o != 0)
		{
			san(mi2, o);
		}
		else
		{

		}
	}
	else if (i == 0)
	{
		for (int iii = 0; iii < strlen(can); iii++)
		{
			mi2[iii] = can[iii];
		}
	}
}

void srmy(char y[maxsize])
{
	int pd = 0, zmcf = 0, qtwt = 0, qzyz = 0;
	gets(y);
	for (int k = 0; k < strlen(y) - 1; k++)
	{
		for (int r = k + 1; r < strlen(y); r++)
		{
			if (y[k] == y[r])
			{
				pd++;
				zmcf++;
			}
		}
	}
	for (int k = 0; k < strlen(y); k++)
	{
		if (y[k] == 'z' || y[k] == 'Z')
		{
			pd++;
			qzyz++;
		}
	}
	for (int k = 0; k < strlen(y); k++)
	{
		if (y[k] <'A' || y[k]>'z')
		{
			pd++;
			qtwt++;
		}
		if (y[k] <'a' && y[k]>'Z')
		{
			pd++;
			qtwt++;
		}
	}
	if (pd)
	{

		if (zmcf)
		{
			printf("密钥中的字符不可重复!!!\n");
		}
		if (qtwt)
		{
			printf("请输入英文字母!!!\n");
		}
		if (qzyz)
		{
			printf("密钥中不可有字母Z!!!\n");
		}
		printf("请重新输入密钥:\n");
		char zj[maxsize];
		srmy(zj);
		pd = 0;
	}
	else
	{
		int k;
		for (k = 0; k < strlen(y); k++)
		{
			miyao[k] = y[k];
		}
	}
}

int main()
{
	printf("欢迎来到类人猿加密系统\n");
	printf("请输入密钥:\n");
	srmy(q);
	int i = 0;
	bt T = NULL, U = NULL;
	for (ss = 0; ss < strlen(miyao); ss++)
	{
		if (miyao[ss] >= 'A'&&miyao[ss] <= 'Y')
		{
			miyao[ss] = (char)((int)miyao[ss] + 32);
		}
	}
	gz(miyao);
	for (ss = 0; ss < strlen(miyao); ss++)
	{
		miyao[ss] = (char)((int)miyao[ss] - 32);
	}
	GZ(miyao);
	for (i = 0; i < strlen(b); i++)
	{
		jianshu2(&T, b[i], i);
	}
	for (i = 0; i < strlen(B); i++)
	{
		jianshu2(&U, B[i], i);
	}
	printf("请输入明文:\n");
	gets(q);
	printf("请输入栅栏加密的次数:\n");
	scanf_s("%d", &zls);
	for (ss = 0; ss < strlen(q); ss++)
	{
		if (q[ss] >= 'a'&&q[ss] <= 'y')
		{
			int panduan = jib;
			jiami(&T, q[ss], ss);
			if (jib == panduan)
			{
				int sss;
				bt G = NULL;
				for (sss = 0; sss < strlen(b); sss++)
				{
					jianshu2(&G, b[sss], sss);
				}
				father(&G, q[ss], ss);
				mi[jib] = fa;
				for (sss = 0; sss < strlen(b); sss++)
				{
					jianshu2(&G, b[ss], ss);
				}
				bro(&G, q[ss], ss);
				mi[jib + 1] = br;
				jib += 2;
			}
		}
		else if (q[ss] >= 'A'&&q[ss] <= 'Y')
		{
			int panduan = jib;
			jiami(&U, q[ss], ss);
			if (jib == panduan)
			{
				int sss;
				bt U = NULL;
				for (sss = 0; sss < strlen(B); sss++)
				{
					jianshu2(&U, B[sss], sss);
				}
				father(&U, q[ss], ss);
				mi[jib] = fa;
				for (sss = 0; sss < strlen(b); sss++)
				{
					jianshu2(&U, b[ss], ss);
				}
				bro(&U, q[ss], ss);
				mi[jib + 1] = br;
				jib += 2;
			}
		}
		else
		{
			mi[jib] = q[ss];
			jib++;
		}
	}
	san(mi, zls);
	printf("密文为:\n");
	for (ss = 0; ss < strlen(mi2); ss++)
	{
		printf("%c", mi2[ss]);
	}
	printf("结束\n");
	system("pause");
	return 0;
}
